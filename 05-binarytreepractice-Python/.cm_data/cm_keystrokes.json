{
    "binarytree.py": [
        {
            "operation": "PASTE",
            "lines": 45,
            "keyStrokeTimeStamp": "Tue Aug 24 2021 18:02:45",
            "keyStrokeInfo": "class Node(object):\r\n    def __init__(self, value):\r\n        self.value = value\r\n        self.left = None\r\n        self.right = None\r\n\r\nclass BinaryTree(object):\r\n    def __init__(self, root):\r\n        self.root = Node(root)\r\n\r\n    def search(self, find_val):\r\n        \"\"\"\r\n        Return True if the find_val is in the tree and False otherwise.\r\n        \"\"\"\r\n        # Your code goes here\r\n        return self.preorder_search(self.root,find_val)\r\n\r\n    def print_tree(self):\r\n        \"\"\"\r\n        Print out all tree nodes as they are visited in a pre-order traversal.\"\"\"\r\n        # Your code goes here\r\n        self.preorder_print(self.root)\r\n\r\n    def preorder_search(self, start, find_val):\r\n        \"\"\"\r\n        Helper method - use this to create a recursive search solution.\r\n        \"\"\"\r\n        # Your code goes here\r\n        if start ==None:\r\n            return False\r\n        if start.value == find_val:\r\n            return True\r\n        return self.preorder_search(start.left,find_val) or self.preorder_search(start.right,find_val)\r\n\r\n\r\n    def preorder_print(self, start, traversal):\r\n        \"\"\"\r\n        Helper method - use this to create a recursive print solution.\r\n        \"\"\"\r\n        # Your code goes here\r\n        if start is None:\r\n            return \r\n        print(start.value)\r\n        self.preorder-print(start.left)\r\n        self.preorder_print(start.right)",
            "position": "1,1"
        }
    ]
}